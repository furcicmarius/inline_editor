<?php

/**
 * Implements hook_menu()
 */
function inline_editor_menu() {
  $items['test'] = array(
    'title' => '',
    'page callback' => 'inline_editor_test',
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );

  $items['get-form'] = array(
    'title' => '',
    'page callback' => 'inline_editor_test',
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );

  $items['inline-editor/get-ajax-form'] = array(
    'page callback' => 'inline_editor_get_ajax_form',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['save-cke-inline-data'] = array(
    'page callback' => 'inline_editor_save_inline_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function inline_editor_save_inline_data() {
  $data = isset($_POST['data']) ? $_POST['data'] : false;

  if ($data) {

    switch ($data['fieldType']) {
      case 'text_with_summary':
        $value = array('value' => strip_tags($data['data']));
        break;

      default :
        $value = strip_tags($data['data']);
    }

    $entity = reset(entity_load($data['entityType'], array($data['id'])));
    $wrapper = entity_metadata_wrapper($data['entityType'], $entity);
    $wrapper->{$data['fieldName']}->set($value);
    $wrapper->save();
    $entity = reset(entity_load($data['entityType'], array($data['id'])));
    drupal_json_output($entity);
    return ;
  }
  drupal_json_output(false);
}

function inline_editor_get_ajax_form($type, $field_name, $entity_type, $id) {
  // dpm(array($field_name, $entity_type, $id));
  $entities = entity_load($entity_type, array($id));
  $entity = $entities[$id];

  $form = drupal_render(drupal_get_form('inline_editor_get_form', $entity, $field_name, $entity_type));
//  dpm($field_name);

  $commands = array();
  $commands[] = ajax_command_html('.custom-editable-' . $field_name, $form);

  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/*function inline_editor_test() {
  // return drupal_json_output($_POST['field_name']);
  // dpm($_POST);

  $field_name = @$_POST['field_name'] ? $_POST['field_name'] : false;
  $id = @$_POST['id'] ? $_POST['id'] : false;
  $type = @$_POST['type'] ? $_POST['type'] : false;

  // $field_name = 'body'; $id = 2; $type ='node';


  // dpm($type);
  if ($field_name && $id && $type) {

      $entity = entity_load($type, array($id));
      $entity = reset($entity);

      $form = drupal_get_form('inline_editor_get_form', $entity, $field_name, $type);
      // dpm($form);

      // form_set_cache($form['#build_id'], $form, array());

      $html = drupal_render($form);
      // return $html;
      $javascript = drupal_add_js(NULL, NULL);
      $settings = FALSE;

      if(isset($javascript['settings']))
      {
        $settings = '<script type="text/javascript">jQuery.extend(Drupal.settings, ' .
          drupal_json_encode(call_user_func_array('array_merge_recursive', $javascript['settings']['data'])) .
          ');</script>';
      }

      //Add the settings to the form
      $html .= $settings;

      // dpm($html);
      // $form = drupal_render(node_page_edit($entity));
      // dpm($form);
      echo $html;
    }

}*/

function inline_editor_preprocess_page(&$var) {

}

function inline_editor_process(&$variables, $hook) {
  // required for the loaded form to be ajaxy
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
  drupal_add_js("misc/autocomplete.js");

}

function inline_editor_get_form($form, &$form_state, $entity, $field_name, $type){

  // if(!isset($form_state[$type])){
  //   $form_state[$type] = $entity;
  // }
  // else{
  //   $entity = $form_state[$type];
  // }

  $langcode = $entity->language;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('class' => array('custom-edit-save', 'use-ajax')),
    '#ajax' => array(
      'callback' => 'inline_editor_form_ajax',
      'event' => 'click',
    ),
    '#weight' => 50,
  );

  $form['entity_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $entity->nid,
  );

  $form['field_name'] = array(
    '#type' => 'hidden',
    '#default_value' => $field_name,
  );

  $form['entity_type'] = array(
    '#type' => 'hidden',
    '#default_value' => $type,
  );

  $form['cancel'] = array(
    '#markup' => t('Cancel'),
    '#prefix' => '<div class="custom-edit-cancel">',
    '#suffix' => '</div>',
    '#weight' => 51,
  );

  $options = array(
    'field_name' => $field_name,
    'language' => $langcode,
    'default' => TRUE,
  );

  $form['#action'] = "";//'inline_editor_form_ajax_test';

  field_attach_form($type, $entity, $form, $form_state, $langcode, $options);
  // field_attach_prepare_view($type, array(array($entity->nid, $entity)), 'teaser', $langcode);
  return $form;
}

function inline_editor_form_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'inline_editor_remove_body_format';
}

function inline_editor_remove_body_format($form) {
  if (isset($form['body'][LANGUAGE_NONE][0]['format'])) {
    unset($form['body'][LANGUAGE_NONE][0]['format']);
  }
  return $form;
}

function inline_editor_field_widget_properties_alter(&$widget, $context) {
  // dpm($widget);
  if ($context['field']['type'] == 'text_with_summary') {

    $widget['type'] = 'text_textarea';

    $field_name = $context['field']['field_name'];
    if (isset($context['entity']->{$field_name}['und'][0]['value'])) {
      $lines = count(explode("\n", $context['entity']->{$field_name}['und'][0]['value']));
      $widget['settings']['rows'] = $lines + 1;
    }


  }

}

function inline_editor_get_form_validate($form, &$form_state) {
  // $entity_type = $form_state['values']['entity_type'];
  // $entity = $form_state[$entity_type];
  // $field_name = $form_state['values']['field_name'];

  // field_attach_form_validate($entity_type, $entity, $form, $form_state, array('field_name' =>  $field_name));

  // $errors = form_get_errors();
  // if(count($errors)){
  //   return FALSE;
  // }
  // return TRUE;
}

function inline_editor_form_ajax($form, &$form_state) {

  $entity_type = $form_state['values']['entity_type'];
  $entity_id = $form_state['values']['entity_id'];

  $entity = clone reset(entity_load($entity_type, array($entity_id)));
  $field_name = $form_state['values']['field_name'];

  if(!form_get_errors()){
    field_attach_submit($entity_type, $entity, $form, $form_state, array('field_name' =>  $field_name) );
    entity_save($entity_type, $entity);

    // $field = field_view_field($entity_type, $entity, $field_name);
    $field = field_view_field($entity_type, $entity, $field_name, array('settings' => array('image_style' => 'thumbnail')));
    // $image = field_get_items($entity_type, $entity, $field_name);
    // $field = field_view_value($entity_type, $entity, $field_name, $image[0], array(
    //   'type' => 'image',
    //   'settings' => array(
    //     'image_style' => 'thumbnail',
    //     'image_link' => 'content',
    //   ),
    // ));
    $commands[] = array('command' => 'removeClickDisableClass');
    $commands[] = ajax_command_replace('.custom-editable-' . $field_name, drupal_render($field));

    return array('#type' => 'ajax', '#commands' => $commands);

  }
  else {

    $commands = array();

    // foreach ($errors as $input => $error) {dpm($input);
    //   $commands[] = array(
    //     'command' => 'inputSetError',
    //     'inputName' => $input,
    //     'errorMsg' => $error,
    //   );
    // }

    $commands[] = ajax_command_html('.custom-editable-' . $field_name, d);
    $commands[] = ajax_command_append('.custom-editable-' . $field_name, theme('status_messages') . drupal_render($form));
    return array('#type' => 'ajax', '#commands' => $commands);
  }
}

/*function inline_editor_get_form_submit($form, &$form_state) {

}*/


/**
 *  Implements hook_preprocess_node()
 */

function inline_editor_preprocess_node(&$vars) {
  if (drupal_is_front_page()) {
    // return false;
  }
  drupal_add_js(
    array(
      'entityType' => $vars['elements']['#entity_type'],
      'id' => $vars['nid']
    ), 'setting'
  );

}

function inline_editor_entity_view_alter(&$build, $type){
  if (drupal_is_front_page()) {
    // return false;
  }
  $cke_types = array('text_with_summary', 'text', 'text_long');
  if ($type == 'node') {
    $entity_type = $build['#entity_type'];
    $bundle = $build['#bundle'];

    $fields = field_info_instances($entity_type, $bundle);

    foreach ($fields as $field => $value) {
      $field_info = field_info_field($field);
      // dpm($field_info);
      if (in_array($field_info['type'], $cke_types) && $field_info['cardinality'] == 1) {
        // dpm($field_info);
        $cke_fields[$field] = $field_info['type'];
      }
    }
    drupal_add_js(
      array(
        'ckeFields' => $cke_fields,
      ), 'setting'
    );
  }
}
